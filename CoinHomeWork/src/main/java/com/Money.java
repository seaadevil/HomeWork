package com;


public class Money {
    //смотри, по факту ты можешь в money хранить только значение -> value or summ - давай пока-что так,
    // думаю дальше будет более-менее понятно, что к чему
    /*
    не забываем за модификаторы доступа - для полейэто обычно подход private поле, и набор get- set-
     */
    private float value;


    /*
    то-есть по факту ты должен понимать, что банкноты у тебя будут или центы - само число/значение можно сохранить в пределах
    переменой value- согласен?  ок, поняла)
     */
    public Money(float value) {
        this.value = value;//конструктор по умолчанию у нас будет отсутствоать.
    }

    //определим гетер для value - чтобы метод pay(давай все же поднимем его в класс SparklingWater..
    public float getValue() {
        return value;
    }

    //пока-что не принципиально - можем вообще не определять эту логику здесь, а вынести ее за пределы "денег"
    //возложить логику анализа и распоряжения деньгами на автомат - опять же на твое усмотрение
    //давай пока-что идти дальше
    //на текущий момент у нас есть просто класс Money, который ничем не наполнен - то-есть логика(в виде функционала) в нем отсутсвует какая-либо
    //давай определим только конструктор, и возможность забирать наше значение, окей


    @Override
    public String toString() {
        return "Money{" +
                "value=" + value +
                '}';
    }
}
